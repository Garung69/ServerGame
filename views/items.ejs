<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Buy Items</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">   
    <link href='https://unpkg.com/boxicons@2.1.2/css/boxicons.min.css' rel='stylesheet'>
    <link rel="stylesheet" href="css/login.css">
    <style>
        *{
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            
        }
        body {
            background: url(/res/img/background.png);
            background-repeat: no-repeat;
            display: block;
            background-size: 100% 100%;
            position: relative;
            background-attachment: fixed;
        }
        .BodyContainer{
            transform: translate3d(0%, 30%, 0px) scale3d(1, 1, 1) ;
        }
        .HeroText-1{
            width: 100%;
            font-size: 6rem;
            background-image: linear-gradient(180deg, #00ffd1, #00ffd1);
            font-weight: 900;
            text-align: center;
            -webkit-background-clip: text;
            background-clip: text;
            -webkit-text-fill-color: transparent;
            display: block;
            overflow: hidden;
            
            transform-style: preserve-3d;
            float: left;
            animation-name: HeroText1Animation;
            animation-duration: 4s;
            animation-iteration-count: initial;
            animation-delay: 0s;
        }
        .walletconnect{
            display: flex;
            flex-direction: column;
            width: 100%;
            align-content: center;
            text-align: center;
        }
        .payment{
            align-self: center;
        }.hint{
            color: white;
            font-size: 18px;
        }
    </style>
</head>

<body>
    <div class="BodyContainer">
        <div class="HeroText">
            <h1 class="HeroText-1">Confirm Payment</h1>
            <div class="walletconnect">
                <img class="payment" src="/res/img/payment.png" width="300px" height="280px">
                <span class="hint">*Please confirm your payment!</span>
            </div>
        </div>
    </div>
</body>
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>

</html>
<script>
    let account;

    window.onload = async () =>{
        console.log("a")
        if (typeof window.ethereum == 'undefined') {
            if (confirm("Please install metamask!") == true) {
                let url = "https://metamask.io/download/";
                window.open(url, '_blank').focus();
            }
        } else {
            const accounts = await ethereum.request({ method: 'eth_requestAccounts' });
            account = accounts[0];
            console.log(account);
        }
    }
    const PaymentButton = document.querySelector('.payment');
    PaymentButton.addEventListener('click', () => {
        setTransfer();
    });
    function getItemId() {
        const id = window.location.href.split('/')[4].replace(/\s/g, '').replace('#', '')
        console.log(id)
        return id;
    }
    const transactionParameters = {
        to: '0xdD9a69A4380FFFA49f1962b5dDE7E3143BE37E86', 
        value: '0x' + (10000000000000000).toString(16),
    };
    async function setTransfer() {
        transactionParameters.from = account;
        const txHash = await ethereum.request({
            method: 'eth_sendTransaction',
            params: [transactionParameters],
        }).then((txHash) => $.ajax({
            url: '/saveDataBuyItems',
            method: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(
                { tx: txHash, address: account, id: getItemId() }
            ),
            datatype: "json",
            success: function (result) {
                console.log(result)
            },
            error: function (result) {
                console.log(result);
            }
        }));
    };
    async function getAccount() {
        const accounts = await window.ethereum.request({
            method: "eth_requestAccounts",
            params: [
                {
                    eth_accounts: {}
                }
            ]
        });
        return accounts[0];
    }
</script>